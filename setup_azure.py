"""
Setup script for Azure AI Foundry configuration.
"""
import os
import sys
from typing import Optional


def get_model_deployments_info():
    """Provide information about getting model deployment details."""
    return """
To get your model deployment information:

1. Go to Azure AI Foundry portal: https://ai.azure.com
2. Navigate to your project: tvonment-ai
3. Go to "Models + endpoints" section
4. Find your deployed models and note:
   - Model deployment names (e.g., "gpt-4o-mini", "gpt-4o")
   - Individual model endpoints (if using serverless deployments)

Common model deployment names:
- gpt-4o-mini
- gpt-4o
- gpt-35-turbo
- text-embedding-ada-002
"""


def create_env_file():
    """Create .env file with Azure AI Foundry configuration."""
    
    print("Azure AI Foundry Multi-Agent Setup")
    print("=" * 50)
    
    # Check if .env already exists
    if os.path.exists(".env"):
        response = input(".env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    print("\nBased on your project URL: https://tvonment-ai-resource.services.ai.azure.com/api/projects/tvonment-ai")
    print("Let's configure your environment...")
    
    # Get configuration from user
    config = {}
    
    # Project endpoint (pre-filled from user's URL)
    config['AZURE_AI_FOUNDRY_PROJECT_ENDPOINT'] = 'https://tvonment-ai-resource.services.ai.azure.com/api/projects/tvonment-ai'
    print(f"\nProject endpoint: {config['AZURE_AI_FOUNDRY_PROJECT_ENDPOINT']}")
    
    # API Key
    api_key = input("\nEnter your Azure AI Foundry API key: ").strip()
    if not api_key:
        print("Error: API key is required")
        return
    config['AZURE_AI_FOUNDRY_API_KEY'] = api_key
    
    # Model deployment name
    print(get_model_deployments_info())
    default_model = input("\nEnter your default model deployment name (default: gpt-4o-mini): ").strip()
    config['DEFAULT_MODEL_DEPLOYMENT_NAME'] = default_model or 'gpt-4o-mini'
    
    # Optional: Specific model endpoint (for serverless deployments)
    use_specific_endpoint = input("\nDo you have a specific model endpoint (for serverless deployments)? (y/N): ").strip().lower()
    if use_specific_endpoint == 'y':
        model_endpoint = input("Enter the specific model endpoint URL: ").strip()
        if model_endpoint:
            config['AZURE_AI_INFERENCE_ENDPOINT'] = model_endpoint
            
            model_key = input("Enter the API key for this model endpoint (or press Enter to use the same key): ").strip()
            config['AZURE_AI_INFERENCE_API_KEY'] = model_key or api_key
    
    # Agent configuration
    config['AZURE_AI_AGENT_ENDPOINT'] = config['AZURE_AI_FOUNDRY_PROJECT_ENDPOINT']
    config['AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME'] = config['DEFAULT_MODEL_DEPLOYMENT_NAME']
    
    # Optional: Embedding model
    embedding_model = input(f"\nEnter embedding model deployment name (default: text-embedding-ada-002): ").strip()
    config['EMBEDDING_MODEL_DEPLOYMENT_NAME'] = embedding_model or 'text-embedding-ada-002'
    
    # Application settings
    config['LOG_LEVEL'] = 'INFO'
    config['MAX_TOKENS'] = '1000'
    config['TEMPERATURE'] = '0.7'
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write("# Azure AI Foundry Configuration\n")
            f.write("# Generated by setup script\n\n")
            
            for key, value in config.items():
                f.write(f"{key}={value}\n")
            
            f.write("\n# Optional: Entra ID Configuration (for production)\n")
            f.write("# AZURE_CLIENT_ID=your-client-id\n")
            f.write("# AZURE_CLIENT_SECRET=your-client-secret\n")
            f.write("# AZURE_TENANT_ID=your-tenant-id\n")
        
        print(f"\n✅ .env file created successfully!")
        print(f"✅ Configured for project: tvonment-ai")
        print(f"✅ Default model: {config['DEFAULT_MODEL_DEPLOYMENT_NAME']}")
        
        print("\nNext steps:")
        print("1. Install dependencies: pip install -r requirements.txt")
        print("2. Test the configuration: python examples/basic_agent_demo.py")
        print("3. Try multi-agent collaboration: python examples/multi_agent_collaboration.py")
        
    except Exception as e:
        print(f"Error creating .env file: {e}")


def verify_configuration():
    """Verify the current configuration."""
    print("Verifying Azure AI Foundry configuration...")
    
    if not os.path.exists('.env'):
        print("❌ .env file not found. Run setup first.")
        return False
    
    # Load and check .env file
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        required_vars = [
            'AZURE_AI_FOUNDRY_PROJECT_ENDPOINT',
            'AZURE_AI_FOUNDRY_API_KEY',
            'DEFAULT_MODEL_DEPLOYMENT_NAME'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"❌ Missing required environment variables: {', '.join(missing_vars)}")
            return False
        
        print("✅ Configuration looks good!")
        print(f"✅ Project: {os.getenv('AZURE_AI_FOUNDRY_PROJECT_ENDPOINT')}")
        print(f"✅ Model: {os.getenv('DEFAULT_MODEL_DEPLOYMENT_NAME')}")
        
        return True
        
    except ImportError:
        print("❌ python-dotenv not installed. Run: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"❌ Error verifying configuration: {e}")
        return False


def main():
    """Main setup function."""
    if len(sys.argv) > 1 and sys.argv[1] == "verify":
        verify_configuration()
    else:
        create_env_file()


if __name__ == "__main__":
    main()
